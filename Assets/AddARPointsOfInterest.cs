using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Networking;
using Mapbox.Unity.Map;
using Mapbox.Utils;
using Mapbox.Unity.Utilities;
using Mapbox.Map;
using Mapbox.Unity.MeshGeneration.Data;
using Mapbox.Json;
using UniGLTF;
using System.IO;
using System.Text;
using System;
using Mapbox.Unity.Location;
using System.Linq;

//Objects informations to get from the database
public class ObjectInfo
{
    //Id (not used, generated by MongoDB)
    public string _id;
    //Name of the object
    public string name;
    //Coordinates
    public float lng;
    public float lat;
    //Height and orientation set by the user
    public float height;
    public int orientation;

    public ObjectInfo(string pid, string pname, float plng, float plat, float pheight, int pori)
    {
        this._id = pid;
        this.name = pname;
        this.lng = plng;
        this.lat = plat;
        this.height = pheight;
        this.orientation = pori;
    }
}

[System.Serializable]
public class AddARPointsOfInterest : MonoBehaviour {

    //All objects informations
    public ObjectInfo[] objectsInfos_All;
    //Objects informations currently near the user
    public List<ObjectInfo> objectsInfos_Near;
    public List<ObjectInfo> objectsInfos_Near_Old;
    //Spawned POIs object
    public List<GameObject> ARObjects;

    //Location provider
    public Mapbox.Unity.Location.DeviceLocationProviderAndroidNative provider;
    Location lastKnownLocation;

    //Maximum distance from the user where object can be spawned
    public float sightRange = 0.005f;
    //Time between objects refreshes (in seconds)
    float refreshTime = 10;

    AbstractMap map;

    bool isMapInitied = false;
    bool areRequestsFinished = false;
    bool ArePOIsAdded = false;
    bool isAddPOIsWorking = false;

    //Requests URLs
    string URL_getObjectsInfos = "http://192.168.1.112:3000/database/getObjectInfos";
    string URL_getObjects = "http://192.168.1.112:3000/transfer/getObjects";

    //Path to local infos/objects folders
    string filepath_infos;
    string filepath_objects;

    //The map needs to be initialized and the objects downloaded in order to the POIs to be placed
    private void Start()
    {
        objectsInfos_Near = new List<ObjectInfo>();
        objectsInfos_Near_Old = new List<ObjectInfo>();
        ARObjects = new List<GameObject>();

        map = GetComponent<AbstractMap>();

        map.OnInitialized += setMapInited;
        provider.OnLocationUpdated += Provider_OnLocationUpdated;

        //Application.persistentDataPath can't be called before Awake() or Start()
        filepath_infos = Application.persistentDataPath + "/geoar/geoinfos/";
        filepath_objects = Application.persistentDataPath + "/geoar/3dObjects/";

        Mapbox.Unity.Utilities.Console.Instance.Log("START", "yellow");
        Debug.Log("START");

        //Create directories if they do not exists
        CreateObjectsDirs();

        //Theb get all the objects infos
        StartCoroutine(GetObjectInfos());
    }

    /*
     * Check if POIs needs to be added or updated
     */
    bool startRefresh = false;
    void Update()
    {
        //When the 3D objets are added we start the refreshing
        if (ArePOIsAdded && !isAddPOIsWorking && !startRefresh)
        {
            startRefresh = true;
            StartCoroutine(Refresh());
        }
        else
            //If all the objects are loaded we can place them on the map
            if (isMapInitied && areRequestsFinished && !ArePOIsAdded && !isAddPOIsWorking)
            PlaceObjects();
    }

    /* 
     * Called when the map is initialized
     */
    void setMapInited()
    {
        isMapInitied = true;
        Mapbox.Unity.Utilities.Console.Instance.Log("Map is initialized", "cyan");
    }

    /**
     * Get the objects infos from the database
     */
    IEnumerator GetObjectInfos()
    {
        string filepath = filepath_infos + "infos.json";
        
        //Get the data from the server
        UnityWebRequest request = UnityWebRequest.Get(URL_getObjectsInfos);
        //Set a twelve seconds timeout in case an error isn't returned
        request.timeout = 12;
        Mapbox.Unity.Utilities.Console.Instance.Log("send infos req", "yellow");
        yield return request.SendWebRequest();
        Mapbox.Unity.Utilities.Console.Instance.Log("returns from req", "yellow");
        Debug.Log("Infos request");

        //If there is an error or no network we try to load a local infos file
        if (request.isNetworkError || request.isHttpError)
        {
            Mapbox.Unity.Utilities.Console.Instance.Log(request.error, "red");
            try
            {
                //If the file exists, we load it as a string then convert it to an array of ObjectInfo
                if (File.Exists(filepath))
                {
                    Mapbox.Unity.Utilities.Console.Instance.Log("local infos exists", "yellow");
                    string response = File.ReadAllText(filepath);
                    objectsInfos_All = JsonConvert.DeserializeObject<ObjectInfo[]>(response);
                    Mapbox.Unity.Utilities.Console.Instance.Log("Got infos : " + objectsInfos_All.Length, "cyan");

                    //Then we check what objects are near the current location
                    GetNearObjectsInfos();
                }
                else
                {
                    Mapbox.Unity.Utilities.Console.Instance.Log("No file found, no POIs to add", "yellow");
                }
            }
            catch (Exception e)
            {
                Mapbox.Unity.Utilities.Console.Instance.Log(e.Message, "red");
            }
        }
        else
        {
            //Convert to response to an array of ObjectInfo
            string response = System.Text.Encoding.UTF8.GetString(request.downloadHandler.data);
            objectsInfos_All = JsonConvert.DeserializeObject<ObjectInfo[]>(response);
            Mapbox.Unity.Utilities.Console.Instance.Log("Got infos : " + objectsInfos_All.Length, "cyan");

            //Write the file on disk
            try
            {
                if (File.Exists(filepath))
                    File.Delete(filepath);
                File.WriteAllText(filepath, response);
                Mapbox.Unity.Utilities.Console.Instance.Log("File writed", "yellow");
            }
            catch (Exception e)
            {
                Mapbox.Unity.Utilities.Console.Instance.Log(e.Message, "red");
            }

            //Then we check what objects are near the current location
            GetNearObjectsInfos();
        }
    }

    /*
     * Get near objects infos from all retrieved infos
     */
    void GetNearObjectsInfos()
    {
        //Debug purposes
        //Save old infos
       objectsInfos_Near_Old.Clear();
        foreach (ObjectInfo inf in objectsInfos_Near)
            objectsInfos_Near_Old.Add(inf);

        objectsInfos_Near.Clear();
        foreach (ObjectInfo inf in objectsInfos_All)
            objectsInfos_Near.Add(inf);
        StartCoroutine(GetObjects());

        /*double actualLng = lastKnownLocation.LatitudeLongitude[0];
        double actualLat = lastKnownLocation.LatitudeLongitude[1];

        //Save old infos
        objectsInfos_Near_Old.Clear();
        foreach (ObjectInfo inf in objectsInfos_Near)
            objectsInfos_Near_Old.Add(inf);
        objectsInfos_Near.Clear();

        //Check all infos and retrieve the ones that are near the user
        foreach (ObjectInfo inf in objectsInfos_All)
            //Check if the coordinates are in the current range. 
            if (Math.Abs(inf.lng - actualLng) <= (sightRange  / 2) && Math.Abs(inf.lat - actualLat) <= sightRange)
            {
                objectsInfos_Near.Add(inf);
                Mapbox.Unity.Utilities.Console.Instance.Log("Added infos", "yellow");
            }*/

        //Then download and spawn the objects
        StartCoroutine(GetObjects());

        Mapbox.Unity.Utilities.Console.Instance.Log("OK : all:" + objectsInfos_All.Length + " & near:" + objectsInfos_Near.Count + " & old:" + objectsInfos_Near_Old.Count, "red");
        Debug.Log("OK : all:" + objectsInfos_All.Length + " & near:" + objectsInfos_Near.Count + " & old:" + objectsInfos_Near_Old.Count);
    }

    /*
     * Download the objects
     */
    int cnt = 0;
    IEnumerator GetObjects()
    {
        yield return new WaitForSeconds(3);
        Debug.Log("Objects request");

        //If not empty, update the ARObject list and remove the old objects
        RemoveOldObjects();

        //For each objects
        foreach (ObjectInfo inf in objectsInfos_Near)
        {
            //We check first if the object already is spawned
            if (!objectsInfos_Near_Old.Contains(inf))
            {
                Debug.Log("NOT SPAWNDED");
                string filepath = filepath_objects + inf.name;
                //We check first if the objects already exists on the phone
                if (File.Exists(filepath))
                {
                    Mapbox.Unity.Utilities.Console.Instance.Log("File exists", "yellow");
                }
                else
                {
                    //Get the data from the server
                    UnityWebRequest request = UnityWebRequest.Get(URL_getObjects + "/" + inf.name);
                    //Set a twelve seconds timeout in case an error isn't returned
                    request.timeout = 12;
                    Mapbox.Unity.Utilities.Console.Instance.Log("URL : " + URL_getObjects + "/" + inf.name, "cyan");
                    yield return request.SendWebRequest();

                    if (request.isNetworkError || request.isHttpError)
                        Mapbox.Unity.Utilities.Console.Instance.Log(request.error, "yellow");
                    else
                    {
                        Mapbox.Unity.Utilities.Console.Instance.Log("data size :" + request.downloadHandler.data.Length, "yellow");
                        //Write object as local file
                        try
                        {
                            File.WriteAllBytes(filepath, request.downloadHandler.data);
                            Mapbox.Unity.Utilities.Console.Instance.Log("File writed", "yellow");
                        }
                        catch (Exception e)
                        {
                            Mapbox.Unity.Utilities.Console.Instance.Log(e.Message, "red");
                        }
                    }
                }
                //Load the glb file as a gameobject
                ImporterContext context = gltfImporter.Load(filepath);
                context.ShowMeshes();

                //ADD ROTATE
                cnt++;
                if (cnt == 4 || cnt == 8 || cnt == 3 || cnt == 7)
                {
                    context.Root.AddComponent<RotateObject>();
                }
                //Add it to the AR objects array
                ARObjects.Add(context.Root);
            }
        }
        //Requests are finshed and objects loaded
        areRequestsFinished = true;
        Mapbox.Unity.Utilities.Console.Instance.Log("Finished reqs", "cyan");
    }

    /* 
     * Place the spawned objects on the map with lat, lng, height & orientation
     */
    void PlaceObjects ()
    {
        Debug.Log("Place POIs");
        isAddPOIsWorking = true;

        map = GetComponent<AbstractMap>();

        Vector3 locationsWithHeight = new Vector3();
        Vector2d locations = new Vector2d();

        //For each objects
        foreach (GameObject obj in ARObjects)
        {
            //If the object is already placed we do nothing
            bool pass = true;
            foreach (ObjectInfo old in objectsInfos_Near_Old)
                if (old.name == (obj.name + ".glb"))
                    pass = false;
            if (pass)
            {
                ObjectInfo currentInfo = objectsInfos_Near[0];
                //First we get the index of the infos list
                foreach (ObjectInfo inf in objectsInfos_Near)
                    if (inf.name == (obj.name + ".glb"))
                        currentInfo = inf;

                //Extract location
                string locationString = currentInfo.lat + "," + currentInfo.lng;
                locations = Conversions.StringToLatLon(locationString);

                //Get the POI height
                float h = GetLocationHeight(locations);

                //Lat lon to unity units
                Vector3 location = Conversions.GeoToWorldPosition(locations[0], locations[1], map.CenterMercator, map.WorldRelativeScale).ToVector3xz();
                //Replace y in inital vector position and add the user's height
                locationsWithHeight = new Vector3(location.x, h + (currentInfo.height - 1), location.z);

                //Set the transform properties of the spawned object
                obj.transform.localPosition = locationsWithHeight;
                obj.transform.localScale = new Vector3(0.008f, 0.008f, 0.008f);
                obj.transform.localRotation = Quaternion.Euler(0.0f, (currentInfo.orientation + 180), 0.0f);
                obj.transform.SetParent(transform);

                Mapbox.Unity.Utilities.Console.Instance.Log("POI addded at " + locationString, "cyan");
            }
        }

        ArePOIsAdded = true;
        isAddPOIsWorking = false;
        Mapbox.Unity.Utilities.Console.Instance.Log("Finished adding POIs", "cyan");
        Debug.Log("Finished");
    }

    /*
     * Call the process every x seconds
     */
    IEnumerator Refresh()
    {
        yield return new WaitForSeconds(refreshTime);
        GetNearObjectsInfos();
        StartCoroutine(Refresh());
    }

    /*
     * Remove the old objects from the scene and the global array
     */
    void RemoveOldObjects()
    {
        if (ARObjects.Count != 0)
        {
            //Get the objects that are still near
            List<GameObject> tmp = new List<GameObject>();
            foreach (GameObject obj in ARObjects)
                foreach (ObjectInfo inf in objectsInfos_Near)
                    if (inf.name == (obj.name + ".glb"))
                        tmp.Add(obj);
            //Remove the ones that arent in range anymore
            List<GameObject> diff = new List<GameObject>();
            diff = ARObjects.Except(tmp).ToList<GameObject>();
            foreach (GameObject obj in diff)
            {
                ARObjects.Remove(obj);
                Destroy(obj);
            }
        }
    }

    /*
     * Create the directories for informations and objects storing if they do not exists
     */
    void CreateObjectsDirs()
    {
        //Create directories if they don't exists
        if (!Directory.Exists(filepath_infos))
        {
            Mapbox.Unity.Utilities.Console.Instance.Log("created inf dir", "yellow");
            Directory.CreateDirectory(filepath_infos);

        }
        else
            Mapbox.Unity.Utilities.Console.Instance.Log("dir inf exists", "yellow");
        if (!Directory.Exists(filepath_objects))
        {
            Mapbox.Unity.Utilities.Console.Instance.Log("created objs dir", "yellow");
            Directory.CreateDirectory(filepath_objects);
        }
        else
            Mapbox.Unity.Utilities.Console.Instance.Log("dir objs exists", "yellow");
    }

    /*
     * Get the altitude of a lnt/lat location
     */
    float GetLocationHeight(Vector2d location)
    {
        //Get tile ID
        var tileIDUnwrapped = TileCover.CoordinateToTileId(new Mapbox.Utils.Vector2d(location[0], location[1]), (int)map.Zoom);
        //Get tile
        try
        {
            UnityTile tile = map.MapVisualizer.GetUnityTileFromUnwrappedTileId(tileIDUnwrapped);
            //Lat lon to meters because the tiles rect is also in meters
            Vector2d v2d = Conversions.LatLonToMeters(new Mapbox.Utils.Vector2d(location[0], location[1]));
            //Get the origin of the tile in meters
            Vector2d v2dcenter = tile.Rect.Center - new Mapbox.Utils.Vector2d(tile.Rect.Size.x / 2, tile.Rect.Size.y / 2);
            //Offset between the tile origin and the lat lon point
            Vector2d diff = v2d - v2dcenter;
            //Maping the diffetences to (0-1)
            float Dx = (float)(diff.x / tile.Rect.Size.x);
            float Dy = (float)(diff.y / tile.Rect.Size.y);
            //returns height in unity units
            return tile.QueryHeightData(Dx, Dy);
        }
        catch(Exception e)
        {
            Mapbox.Unity.Utilities.Console.Instance.Log("ERROR", "red");

        }
        return 480f;
    }

    /*
     * Update the current location when available
     */
    void Provider_OnLocationUpdated(Location location)
    {
        if (isMapInitied && location.IsLocationUpdated)
        {
            Mapbox.Unity.Utilities.Console.Instance.Log("loc : " + location.LatitudeLongitude.ToString(), "red");
            lastKnownLocation = location;
        }
    }
}
